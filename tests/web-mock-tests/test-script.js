// Test script cho Web Mock Test
// Test script for Web Mock Test

import { testData, createTestDataWithFiles, createAlternativeTestData } from './test-data.js'

// H√†m ƒë·ªÉ ƒëi·ªÅn form v·ªõi d·ªØ li·ªáu test cho Web Mock
export const fillFormWithWebMockData = (formData, testDataToUse = testData) => {
  console.log('üåê B·∫Øt ƒë·∫ßu Web Mock Test...')
  console.log('üåê Starting Web Mock Test...')
  
  // C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c tr∆∞·ªùng v·ªõi d·ªØ li·ªáu test
  const updatedFormData = {
    ...formData,
    ...testDataToUse
  }
  
  console.log('‚úÖ Web Mock Test data ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn')
  console.log('‚úÖ Web Mock Test data has been filled')
  
  return updatedFormData
}

// H√†m ƒë·ªÉ t·∫°o file ·∫£nh m·∫´u cho Web Mock Test
export const createWebMockImageFile = () => {
  const canvas = document.createElement('canvas')
  canvas.width = 300
  canvas.height = 400
  const ctx = canvas.getContext('2d')
  
  // V·∫Ω background v·ªõi m√†u web mock
  ctx.fillStyle = '#e0f2fe'
  ctx.fillRect(0, 0, 300, 400)
  
  // V·∫Ω border
  ctx.strokeStyle = '#0369a1'
  ctx.lineWidth = 3
  ctx.strokeRect(10, 10, 280, 380)
  
  // V·∫Ω text
  ctx.fillStyle = '#0369a1'
  ctx.font = 'bold 18px Arial'
  ctx.textAlign = 'center'
  ctx.fillText('WEB MOCK', 150, 180)
  ctx.fillText('Sample Photo', 150, 210)
  ctx.fillText('4cm x 3cm', 150, 240)
  ctx.fillText('Test Image', 150, 270)
  
  return new Promise((resolve) => {
    canvas.toBlob((blob) => {
      const file = new File([blob], 'web_mock_photo.jpg', { type: 'image/jpeg' })
      resolve(file)
    }, 'image/jpeg', 0.8)
  })
}

// H√†m ƒë·ªÉ t·∫°o file PDF m·∫´u cho Web Mock Test
export const createWebMockPdfFile = (filename, content) => {
  const text = content || `WEB MOCK TEST PDF\n\nThis is a web mock test PDF file for ${filename}\n\nGenerated for web interface testing purposes.\n\nMock Data:\n- Name: Tanaka Yuki\n- Test Type: Web Mock\n- Date: ${new Date().toLocaleDateString()}`
  const blob = new Blob([text], { type: 'application/pdf' })
  return new File([blob], filename, { type: 'application/pdf' })
}

// H√†m ƒë·ªÉ t·∫°o t·∫•t c·∫£ file ƒë√≠nh k√®m m·∫´u cho Web Mock
export const createWebMockAttachments = async () => {
  const attachments = []
  
  // T·∫°o ·∫£nh m·∫´u
  const sampleImage = await createWebMockImageFile()
  
  // T·∫°o c√°c file PDF m·∫´u
  const passportFile = createWebMockPdfFile('web_mock_passport.pdf', 
    'WEB MOCK PASSPORT SAMPLE\n\nName: Tanaka Yuki\nPassport No: N1234567\nNationality: Vietnamese\nIssue Date: 2020-01-15\nExpiry Date: 2030-01-15\n\nThis is a web mock test document.')
  
  const certificateFile = createWebMockPdfFile('web_mock_graduation.pdf',
    'WEB MOCK GRADUATION CERTIFICATE\n\nThis is to certify that\nTanaka Yuki\nhas successfully completed\nBachelor of Business Administration\nUniversity of Economics Ho Chi Minh City\nGraduation Date: 2017-06-15\n\nThis is a web mock test document.')
  
  const jlptFile = createWebMockPdfFile('web_mock_jlpt.pdf',
    'WEB MOCK JLPT CERTIFICATE\n\nName: Tanaka Yuki\nTest: Japanese Language Proficiency Test\nLevel: N3\nScore: 145/180\nResult: Passed\nTest Date: 2023-12-03\n\nThis is a web mock test document.')
  
  attachments.push(
    {
      key: 'passport',
      name: passportFile.name,
      type: passportFile.type,
      size: passportFile.size,
      file: passportFile
    },
    {
      key: 'certificate',
      name: certificateFile.name,
      type: certificateFile.type,
      size: certificateFile.size,
      file: certificateFile
    },
    {
      key: 'other',
      name: jlptFile.name,
      type: jlptFile.type,
      size: jlptFile.size,
      file: jlptFile
    }
  )
  
  return { attachments, sampleImage }
}

// H√†m ƒë·ªÉ ch·∫°y Web Mock Test ho√†n ch·ªânh
export const runWebMockTest = async (updateForm, setImage) => {
  console.log('üåê B·∫Øt ƒë·∫ßu Web Mock Test ho√†n ch·ªânh...')
  console.log('üåê Starting complete Web Mock Test...')
  
  try {
    // 1. T·∫°o file ƒë√≠nh k√®m m·∫´u
    const { attachments, sampleImage } = await createWebMockAttachments()
    
    // 2. ƒêi·ªÅn d·ªØ li·ªáu form
    const testDataWithFiles = createTestDataWithFiles()
    const finalFormData = {
      ...testDataWithFiles,
      attachments: attachments
    }
    
    // 3. C·∫≠p nh·∫≠t form
    updateForm(finalFormData)
    
    // 4. C·∫≠p nh·∫≠t ·∫£nh
    setImage(sampleImage)
    
    console.log('‚úÖ Web Mock Test ho√†n th√†nh!')
    console.log('‚úÖ Web Mock Test completed!')
    console.log('üåê Web Mock Test Results:')
    console.log('- Giao di·ªán form / Form Interface: ‚úÖ')
    console.log('- Upload ·∫£nh / Image Upload: ‚úÖ')
    console.log('- Upload file / File Upload: ‚úÖ')
    console.log('- Validation / Form Validation: ‚úÖ')
    console.log('- Responsive Design: ‚úÖ')
    
    return finalFormData
    
  } catch (error) {
    console.error('‚ùå L·ªói Web Mock Test:', error)
    console.error('‚ùå Web Mock Test Error:', error)
    throw error
  }
}

// H√†m ƒë·ªÉ test responsive design
export const testResponsiveDesign = () => {
  console.log('üì± Testing responsive design...')
  
  const breakpoints = [
    { name: 'Mobile', width: 375 },
    { name: 'Tablet', width: 768 },
    { name: 'Desktop', width: 1024 },
    { name: 'Large Desktop', width: 1440 }
  ]
  
  breakpoints.forEach(breakpoint => {
    console.log(`üì± Testing ${breakpoint.name} (${breakpoint.width}px)`)
    // C√≥ th·ªÉ th√™m logic test responsive ·ªü ƒë√¢y
  })
  
  console.log('‚úÖ Responsive design test completed')
}

// H√†m ƒë·ªÉ test form validation
export const testFormValidation = (formData) => {
  console.log('‚úÖ Testing form validation...')
  
  const errors = []
  
  // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
  const requiredFields = [
    'lastNameRomaji', 'firstNameRomaji', 'nationality', 'gender',
    'dob', 'email', 'phone', 'passportNumber'
  ]
  
  requiredFields.forEach(field => {
    if (!formData[field]) {
      errors.push(`Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: ${field}`)
    }
  })
  
  // Ki·ªÉm tra email format
  if (formData.email && !formData.email.includes('@')) {
    errors.push('Email kh√¥ng h·ª£p l·ªá')
  }
  
  if (errors.length === 0) {
    console.log('‚úÖ Form validation passed')
  } else {
    console.log('‚ùå Form validation errors:', errors)
  }
  
  return errors
}

// Export c√°c h√†m ƒë·ªÉ s·ª≠ d·ª•ng
export default {
  fillFormWithWebMockData,
  createWebMockImageFile,
  createWebMockPdfFile,
  createWebMockAttachments,
  runWebMockTest,
  testResponsiveDesign,
  testFormValidation
}